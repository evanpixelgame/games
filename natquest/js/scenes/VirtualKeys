// Assuming you have 26 PNG files for each letter, named 'letterA.png', 'letterB.png', ..., 'letterZ.png'
// Create a grid layout for the letter keys
const numRows = 4; // Number of rows in the grid
const numCols = 7; // Number of columns in the grid
const startX = 100; // X-coordinate of the starting position
const startY = 100; // Y-coordinate of the starting position
const spacingX = 100; // Horizontal spacing between keys
const spacingY = 100; // Vertical spacing between keys

// Create a two-dimensional array to hold the sprites
const letterSprites = [];

// Iterate through each letter and position it in the grid
for (let row = 0; row < numRows; row++) {
    letterSprites[row] = [];
    for (let col = 0; col < numCols; col++) {
        // Calculate the position of the current letter key
        const x = startX + col * spacingX;
        const y = startY + row * spacingY;

        // Create a sprite from the PNG file
        const letterKey = this.add.sprite(x, y, 'letter' + String.fromCharCode(65 + row * numCols + col)); // Assuming the filenames follow the pattern 'letterA.png', 'letterB.png', ..., 'letterZ.png'
        letterKey.setInteractive(); // Enable input interaction

        // Set up input event handler
        letterKey.on('pointerdown', () => {
            // Trigger animation when clicked
            letterKey.anims.play('pressed', true);
            
            // Handle input action (e.g., append letter to input field)
            handleInput(letterKey.frame.name); // Assuming the frame name corresponds to the letter
        });

        // Define animation for the pressed state
        this.anims.create({
            key: 'pressed',
            frames: this.anims.generateFrameNumbers('letter' + String.fromCharCode(65 + row * numCols + col), { frames: [1, 2] }), // Assuming frames 1 and 2 are the pressed state frames
            frameRate: 10,
            repeat: 0
        });

        // Store the sprite in the two-dimensional array
        letterSprites[row][col] = letterKey;
    }
}
